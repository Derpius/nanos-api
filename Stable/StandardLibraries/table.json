{
	"name": "table",
	"description": "This library provides generic functions for table manipulation. It provides all its functions inside the table <code>table</code>.",
	"static_functions": [
		{
			"parameters": [
				{
					"type": "table",
					"name": "tbl",
					"description": "The table to insert the variable into."
				},
				{
					"type": "number",
					"name": "position",
					"description": "The position in the table to insert the variable. If the third argument is nil this argument becomes the value to insert at the end of given table.",
					"default": "#tbl + 1"
				},
				{
					"type": "any",
					"name": "value",
					"description": "The variable to insert into the table.",
					"default": ""
				}
			],
			"return": [
				{
					"type": "number"
				}
			],
			"is_native": true,
			"description": "Inserts element value at <code>position</code> in <code>tbl</code>",
			"description_long": "Inserts element value at <code>position</code> in <code>tbl</code>, shifting up the elements <code>tbl[position], tbl[position + 1], ···, tbl[#tbl]</code>",
			"name": "insert"
		},
		{
			"parameters": [
				{
					"type": "table",
					"name": "tbl",
					"description": "The table to sort."
				},
				{
					"type": "function",
					"name": "sorter",
					"description": "If specified, the function will be called with 2 parameters each.\r\nReturn true in this function if you want the first parameter to come first in the sorted array."
				}
			],
			"is_native": true,
			"description": "Sorts the <code>tbl</code> elements in a given order, in-place, from <code>tbl[1]</code> to <code>tbl[#tbl]</code>",
			"description_long": "Sorts the <code>tbl</code> elements in a given order, in-place, from <code>tbl[1]</code> to <code>tbl[#tbl]</code>. If <code>sorter</code> is given, then it must be a function that receives two <code>tbl</code> elements and returns true when the first element must come before the second in the final order, so that, after the sort, i &lt;= j implies <code>not sorter(tbl[j], tbl[i])</code>. If <code>sorter</code> is not given, then the standard Lua operator &lt; is used instead.<br/><br/>The <code>sorter</code> function must define a consistent order; more formally, the function must define a strict weak order. (A weak order is similar to a total order, but it can equate different elements for comparison purposes).<br/><br/>The sort algorithm is not stable: Different elements considered equal by the given order may have their relative positions changed by the sort.",
			"name": "sort"
		},
		{
			"parameters": [
				{
					"type": "table",
					"name": "source_table",
					"description": "The source table from which the elements are to be moved."
				},
				{
					"type": "number",
					"name": "from",
					"description": "The start index of the source range from which the elements are to be moved."
				},
				{
					"type": "number",
					"name": "to",
					"description": "The end index of the source range until which the elements are to be moved."
				},
				{
					"type": "number",
					"name": "dest",
					"description": "The index within the destination table where the moved elements should be inserted. If this is not specified, the moved elements will be inserted at the end of the table."
				},
				{
					"type": "table",
					"name": "dest_table",
					"description": "The destination table to which the elements are to be moved. By default, this is the same as the source table.",
					"default": "source_table"
				}
			],
			"return": [
				{
					"type": "table"
				}
			],
			"is_native": true,
			"description": "Moves elements from the <code>source_table</code> to the <code>dest_table</code>",
			"description_long": "Moves elements from the <code>source_table</code> to the <code>dest_table</code>, performing the equivalent to the following multiple assignment: <code>dest_table[dest], ··· = a1[from], ···, source_table[to]</code>.<br /><br />The destination range can overlap with the source range. The number of elements to be moved must fit in a Lua integer.",
			"name": "move"
		},
		{
			"parameters": [
				{
					"type": "table",
					"name": "tbl",
					"description": "The table to remove the value from."
				},
				{
					"type": "number",
					"name": "index",
					"description": "The index of the value to remove."
				}
			],
			"return": [
				{
					"type": "any"
				}
			],
			"is_native": true,
			"description": "Removes from <code>tbl</code> the element at position <code>index</code>, returning the value of the removed element",
			"description_long": "Removes from <code>tbl</code> the element at position <code>index</code>, returning the value of the removed element.<br /><br />When <code>index</code> is an integer between 1 and <code>#tbl</code>, it shifts down the elements <code>tbl[index + 1], tbl[index + 2], ···, tbl[#tbl]</code> and erases element <code>tbl[#tbl]</code>.<br /><br />The <code>index</code> can also be 0 when <code>#tbl</code> is 0, or <code>#tbl + 1</code>.",
			"name": "remove"
		},
		{
			"parameters": [
				{
					"type": "table",
					"name": "tbl",
					"description": "The table to concatenate."
				},
				{
					"type": "string",
					"name": "separator",
					"description": "A separator to insert between strings",
					"default": "\"\""
				},
				{
					"type": "number",
					"name": "start_pos",
					"description": "The index to start at",
					"default": "1"
				},
				{
					"type": "number",
					"name": "end_pos",
					"description": "The index to end at",
					"default": "#tbl"
				}
			],
			"return": [
				{
					"type": "string"
				}
			],
			"is_native": true,
			"description": "Given a <code>tbl</code> where all elements are strings or numbers, returns the string with elements concatenated.",
			"description_long": "Given a <code>tbl</code> where all elements are strings or numbers, returns the string <code>tbl[start_pos] .. separator .. tbl[start_pos + 1] ... separator .. tbl[end_pos]</code>.<br/><br/>If <code>start_pos</code> is greater than <code>end_pos</code>, returns the empty string",
			"name": "concat"
		}
	]
}
