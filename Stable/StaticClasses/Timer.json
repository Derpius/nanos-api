{
	"name": "Timer",
	"description": "Execute code at specified time intervals.",
	"authority": "both",
	"static_functions": [
		{
			"name": "SetTimeout",
			"authority": "both",
			"description": "Executes a function, after waiting a specified number of milliseconds",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"description": "The callback that will be executed"
				},
				{
					"type": "integer",
					"name": "milliseconds",
					"default": "0",
					"description": "The time in milliseconds to wait before executing the function"
				},
				{
					"type": "any",
					"name": "parameters...",
					"default": "nil",
					"description": "Additional parameters to pass to the function"
				}
			],
			"return": [
				{
					"type": "integer",
					"description": "the timeout_id"
				}
			]
		},
		{
			"name": "SetInterval",
			"authority": "both",
			"description": "Same as SetTimeout(), but repeats the execution of the function continuously",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"description": "The callback that will be executed.<br/>Return false to stop it from being called."
				},
				{
					"type": "integer",
					"name": "milliseconds",
					"default": "0",
					"description": "The time in milliseconds the timer should delay in between executions of the specified function"
				},
				{
					"type": "any",
					"name": "parameters...",
					"default": "nil",
					"description": "Additional parameters to pass to the function"
				}
			],
			"return": [
				{
					"type": "integer",
					"description": "the interval_id"
				}
			]
		},
		{
			"name": "ClearTimeout",
			"authority": "both",
			"description": "Stops the execution of the function specified in SetTimeout()",
			"parameters": [
				{
					"type": "integer",
					"name": "timeout_id",
					"description": "The ID value returned by SetTimeout() is used as the parameter for this method"
				}
			]
		},
		{
			"name": "ClearInterval",
			"authority": "both",
			"description": "Stops the execution of the function specified in SetInterval()",
			"parameters": [
				{
					"type": "integer",
					"name": "interval_id",
					"description": "The ID value returned by SetInterval() is used as the parameter for this method"
				}
			]
		},
		{
			"name": "Bind",
			"authority": "both",
			"description": "Binds a Timer to any Actor. The timer will be automatically cleared when the Actor is destroyed",
			"parameters": [
				{
					"type": "integer",
					"name": "timer_id",
					"description": "The Timer ID"
				},
				{
					"type": "Actor",
					"name": "actor",
					"description": "Actor to be bound"
				}
			],
			"examples" : [
				{
					"title": "Binding a Timer to an Entity",
					"content": [
						"local character = Character(Vector(), Rotator(), \"nanos-world::SK_Male\")",
						"",
						"local my_timer = Timer.SetTimeout(function(_character)",
						"    -- Do something with _character",
						"    -- Ex: Destroy the character after 10 seconds",
						"    _character:Destroy()",
						"end, 10000, character)",
						"",
						"-- Binds the Timer to the Character",
						"-- This will ensure it will never trigger if the character is destroyed before it",
						"-- With this you don't need to validate if the '_character' parameter is valid",
						"Timer.Bind(my_timer, character)"
					]
				}
			]
		},
		{
			"name": "IsValid",
			"authority": "both",
			"description": "Checks if a Timer is currently active or waiting to be triggered",
			"parameters": [
				{
					"type": "integer",
					"name": "timer_id",
					"description": "The Timer ID"
				}
			],
			"return": [
				{
					"type": "boolean",
					"name": "is_valid"
				}
			]
		},
		{
			"name": "GetElapsedTime",
			"authority": "both",
			"description": "Returns the time elapsed since the last tick",
			"parameters": [
				{
					"type": "integer",
					"name": "timer_id",
					"description": "The Timer ID"
				}
			],
			"return": [
				{
					"type": "integer",
					"name": "elapsed_time"
				}
			]
		},
		{
			"name": "GetRemainingTime",
			"authority": "both",
			"description": "Returns the time remaining to the next tick",
			"parameters": [
				{
					"type": "integer",
					"name": "timer_id",
					"description": "The Timer ID"
				}
			],
			"return": [
				{
					"type": "integer",
					"name": "remaining_time"
				}
			]
		},
		{
			"name": "Pause",
			"authority": "both",
			"description": "Pauses the Timer",
			"parameters": [
				{
					"type": "integer",
					"name": "timer_id",
					"description": "The Timer ID"
				}
			]
		},
		{
			"name": "Resume",
			"authority": "both",
			"description": "Resumes the Timer",
			"parameters": [
				{
					"type": "integer",
					"name": "timer_id",
					"description": "The Timer ID"
				}
			]
		},
		{
			"name": "ResetElapsedTime",
			"authority": "both",
			"description": "Resets a Timer to restart from beginning",
			"parameters": [
				{
					"type": "integer",
					"name": "timer_id",
					"description": "The Timer ID"
				}
			]
		}
	]
}
