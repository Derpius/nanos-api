{
	"name": "File",
	"description": "A File represents an entry to a system file.",
	"authority": "server",
	"constructors": [
		{
			"description": "Default Constructor",
			"parameters": [
				{
					"type": "string",
					"name": "file_path",
					"description": "Path relative to server executable"
				},
				{
					"type": "boolean",
					"name": "truncate",
					"default": "false",
					"description": "Whether or not to clear the file upon opening it"
				}
			]
		}
	],
	"functions": [
		{
			"name": "Close",
			"authority":"server",
			"description": "Closes the file and destroys the entity"
		},
		{
			"name": "Flush",
			"authority":"server",
			"description": "Flushes content to the file"
		},
		{
			"return": [
				{
					"type": "boolean",
					"description": "if is EOF"
				}
			],
			"authority":"server",
			"name": "IsEOF",
			"description": "Checks if the file status is End of File"
		},
		{
			"return": [
				{
					"type": "boolean",
					"description": "if status is Bad"
				}
			],
			"authority":"server",
			"name": "IsBad",
			"description": "Checks if the file status is Bad"
		},
		{
			"return": [
				{
					"type": "boolean",
					"description": "if status is Good"
				}
			],
			"authority":"server",
			"name": "IsGood",
			"description": "Checks if the file status is Good"
		},
		{
			"return": [
				{
					"type": "boolean",
					"description": "if last operation failed"
				}
			],
			"authority":"server",
			"name": "HasFailed",
			"description": "Checks if the last operation has Failed"
		},
		{
			"return": [
				{
					"type": "string",
					"description": "file data"
				}
			],
			"authority":"server",
			"name": "Read",
			"description": "Reads characters from the File and returns it. Also moves the file pointer to the latest read position. Pass 0 to read the whole file",
			"parameters": [
				{
					"type": "integer",
					"name": "length",
					"default": "0",
					"description": "Length to be read from file"
				}
			]
		},
		{
			"authority":"server",
			"name": "ReadAsync",
			"description": "Reads characters from the File asynchronously.",
			"parameters": [
				{
					"type": "integer",
					"name": "length",
					"description": "Length to be read from file"
				},
				{
					"type": "function",
					"name": "callback",
					"description": "Callback with the file read"
				}
			]
		},
		{
			"return": [
				{
					"type": "string",
					"description": "file line data"
				}
			],
			"authority":"server",
			"name": "ReadLine",
			"description": "Reads and returns the next file line"
		},
		{
			"return": [
				{
					"type": "table",
					"description": "parsed table"
				}
			],
			"authority":"server",
			"name": "ReadJSON",
			"description": "Reads the whole file as a JSON and returns it."
		},
		{
			"authority":"server",
			"name": "ReadJSONAsync",
			"description": "Reads the whole file as a JSON and returns it asynchronously.",
			"parameters": [
				{
					"type": "function",
					"name": "callback",
					"description": "Callback with the file read"
				}
			]
		},
		{
			"name": "Seek",
			"authority":"server",
			"description": "Sets the file pointer to a specific position",
			"parameters": [
				{
					"type": "integer",
					"name": "position",
					"description": "Position to offset the file pointer"
				}
			]
		},
		{
			"return": [
				{
					"type": "integer",
					"description": "file size"
				}
			],
			"authority":"server",
			"name": "Size",
			"description": "Returns the size of the file"
		},
		{
			"name": "Skip",
			"authority":"server",
			"description": "Skips n (amount) positions from the current file pointer position",
			"parameters": [
				{
					"type": "integer",
					"name": "amount",
					"description": "Amount to offset the file pointer"
				}
			]
		},
		{
			"return": [
				{
					"type": "integer",
					"description": "current file pointer position"
				}
			],
			"authority":"server",
			"name": "Tell",
			"description": "Returns the current file pointer position"
		},
		{
			"name": "Write",
			"authority":"server",
			"description": "Writes the Data at the current position of the file",
			"parameters": [
				{
					"type": "string",
					"name": "data",
					"description": "Data to write to the file"
				}
			]
		}
	],
	"static_functions": [
		{
			"type": "integer",
			"name": "Time",
			"return": [
				{
					"type": "integer",
					"description": "the last update time in unix time"
				}
			],
			"description": "Returns when a file was last modified in Unix time",
			"authority": "server",
			"parameters": [
				{
					"type": "string",
					"name": "path",
					"description": "Path to file"
				}
			]
		},
		{
			"type": "boolean",
			"name": "CreateDirectory",
			"return": [
				{
					"type": "boolean",
					"description": "if succeeded"
				}
			],
			"description": "Creates a Directory (for every folder passed)",
			"authority": "server",
			"parameters": [
				{
					"type": "string",
					"name": "path",
					"description": "Path to folder"
				}
			]
		},
		{
			"name": "Remove",
			"return": [
				{
					"type": "integer",
					"description": "amount of files deleted"
				}
			],
			"description": "Deletes a folder or file",
			"authority": "server",
			"parameters": [
				{
					"type": "string",
					"name": "path",
					"description": "Path to file or folder"
				}
			]
		},
		{
			"name": "Exists",
			"return": [
				{
					"type": "boolean",
					"description": "if exists"
				}
			],
			"description": "Verifies if a entry exists in the file system",
			"authority": "server",
			"parameters": [
				{
					"type": "string",
					"name": "path",
					"description": "Path to file or folder"
				}
			]
		},
		{
			"name": "IsDirectory",
			"return": [
				{
					"type": "boolean",
					"description": "if is a directory"
				}
			],
			"description": "Checks if a path is a directory",
			"authority": "server",
			"parameters": [
				{
					"type": "string",
					"name": "path",
					"description": "Path to folder"
				}
			]
		},
		{
			"name": "IsRegularFile",
			"return": [
				{
					"type": "boolean",
					"description": "if is a regular file"
				}
			],
			"description": "Checks if a path is a file",
			"authority": "server",
			"parameters": [
				{
					"type": "string",
					"name": "path",
					"description": "Path to filey"
				}
			]
		}
	]
}